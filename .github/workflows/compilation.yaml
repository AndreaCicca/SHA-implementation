name: Cmake compilation Conan
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install cross-compilation tools
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Setup Conan
        uses: jwidauer/setup-conan@v1

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-${{ matrix.arch }}-conan2-${{ hashFiles('src/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-conan2-

      - name: Create and configure Conan profile
        run: |
          conan profile detect --force
          if [ "${{ matrix.arch }}" == "aarch64" ]; then
            conan profile update settings.arch=armv8 default
            conan profile update settings.compiler.libcxx=libstdc++11 default
            conan profile update env.CC=/usr/bin/aarch64-linux-gnu-gcc default
            conan profile update env.CXX=/usr/bin/aarch64-linux-gnu-g++ default
          else
            conan profile update settings.arch=x86_64 default
          fi

      - name: Create build directory
        run: mkdir -p src/build

      - name: Install dependencies
        run: conan install src --output-folder=src/build --build=missing

      - name: Configure CMake
        run: |
          if [ "${{ matrix.arch }}" == "aarch64" ]; then
            cmake -S src -B src/build --preset conan-release -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
          else
            cmake -S src -B src/build --preset conan-release
          fi

      - name: Build
        run: cmake --build src/build